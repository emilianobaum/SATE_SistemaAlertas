package com.sate.ui;
import javax.swing.*;
import java.awt.*;

public class SATE_App {
    public static void main(String[] args) {
        // SwingUtilities reside en javax.swing y es necesario para iniciar la UI
        SwingUtilities.invokeLater(() -> new LoginScreen().setVisible(true));
	    }
	}

// ----------------------------------------------------------------------------------
// PANTALLA 1: LOGIN
// ----------------------------------------------------------------------------------

class LoginScreen extends JFrame {
    public LoginScreen() {
        setTitle("SATE - Acceso al Sistema");
        setSize(400, 250);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null); // Centrar la ventana
        setLayout(new BorderLayout(10, 10)); // Usamos BorderLayout

        // Panel principal con GridBagLayout para centrar y alinear
        JPanel mainPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // Título
        JLabel title = new JLabel("🔑 Login de Usuario", SwingConstants.CENTER);
        title.setFont(new Font("Segoe UI", Font.BOLD, 18));
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        mainPanel.add(title, gbc);

        // Campos de texto
        gbc.gridwidth = 1;
        gbc.gridx = 0;
        gbc.gridy = 1;
        mainPanel.add(new JLabel("Usuario (Email):"), gbc);
        gbc.gridx = 1;
        JTextField emailField = new JTextField(20);
        mainPanel.add(emailField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        mainPanel.add(new JLabel("Contraseña:"), gbc);
        gbc.gridx = 1;
        JPasswordField passwordField = new JPasswordField(20);
        mainPanel.add(passwordField, gbc);

        // Panel de Botones
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 15, 5));
        JButton loginButton = new JButton("Iniciar Sesión");
        JButton registerButton = new JButton("Registrarse");
        
        // Simulación de interacción: Abrir pantalla principal al hacer login
        loginButton.addActionListener(e -> {
            dispose(); // Cierra la ventana de login
            new MainDashboard().setVisible(true); // Abre el dashboard principal
        });

        // Simulación de interacción: Abrir registro
        registerButton.addActionListener(e -> new RegisterScreen().setVisible(true));

        buttonPanel.add(loginButton);
        buttonPanel.add(registerButton);

        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridwidth = 2;
        mainPanel.add(buttonPanel, gbc);

        add(mainPanel, BorderLayout.CENTER);
    }
}

// ----------------------------------------------------------------------------------
// PANTALLA 2: REGISTRO
// ----------------------------------------------------------------------------------

class RegisterScreen extends JFrame {
    public RegisterScreen() {
        setTitle("SATE - Registro de Nuevo Usuario");
        setSize(450, 300);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout(10, 10));

        JPanel formPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;

        // Helper para añadir campos
        int row = 0;
        formPanel.add(new JLabel("👤 Nombre Completo:"), gbc(0, row));
        formPanel.add(new JTextField(25), gbc(1, row++));
        
        formPanel.add(new JLabel("✉️ Email (Usuario):"), gbc(0, row));
        formPanel.add(new JTextField(25), gbc(1, row++));
        
        formPanel.add(new JLabel("🔑 Contraseña:"), gbc(0, row));
        formPanel.add(new JPasswordField(25), gbc(1, row++));
        
        formPanel.add(new JLabel("🔁 Repetir Contraseña:"), gbc(0, row));
        formPanel.add(new JPasswordField(25), gbc(1, row++));

        // Botones
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 15, 5));
        buttonPanel.add(new JButton("Crear Cuenta"));
        
        JButton cancelButton = new JButton("Cancelar / Volver");
        cancelButton.addActionListener(e -> dispose());
        buttonPanel.add(cancelButton);

        add(new JLabel("SATE - Formulario de Registro", SwingConstants.CENTER), BorderLayout.NORTH);
        add(formPanel, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);
    }
    
    // Método helper para GridBagConstraints
    private GridBagConstraints gbc(int x, int y) {
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.gridx = x;
        gbc.gridy = y;
        gbc.weightx = (x == 1) ? 1.0 : 0.0;
        return gbc;
    }
}

// ----------------------------------------------------------------------------------
// PANTALLA 3: REGISTRO DE EVENTO (Reporte Manual)
// ----------------------------------------------------------------------------------

class ReporteManualScreen extends JFrame {
    // CAMPOS DE ENTRADA NECESARIOS para ensamblar el WKT
    private JTextField latitudTextField;
    private JTextField longitudTextField;

    public ReporteManualScreen() {
        // [Código de inicialización y JTabbedPane se mantiene igual]

        setTitle("SATE - Reporte de Incidencia");
        setSize(600, 450); // Aumento del tamaño para más espacio
        setLocationRelativeTo(null);

        JTabbedPane tabbedPane = new JTabbedPane();
        
        JPanel detallesPanel = new JPanel(new GridBagLayout());
        tabbedPane.addTab("Detalles del Reporte", crearPanelDetalles(detallesPanel));

        JPanel ubicacionPanel = new JPanel(new GridBagLayout());
        tabbedPane.addTab("Ubicación", crearPanelUbicacion(ubicacionPanel));

        add(tabbedPane, BorderLayout.CENTER);
        
        // Botón Enviar en la parte inferior (Aquí se llamaría a la función de guardado)
        JPanel footerPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        JButton sendButton = new JButton("Enviar Reporte");
        sendButton.setFont(new Font("Segoe UI", Font.BOLD, 14));
        
        // Simulación de acción de envío
        sendButton.addActionListener(e -> {
            String wktString = generarWKT();
            JOptionPane.showMessageDialog(this, 
                "Reporte Enviado.\nCoordenadas WKT generadas:\n" + wktString, 
                "Éxito en el Envío", JOptionPane.INFORMATION_MESSAGE);
            // Aquí se llamaría a la BBDD para guardar el Evento
        });
        
        footerPanel.add(sendButton);
        add(footerPanel, BorderLayout.SOUTH);
    

    private JPanel crearPanelDetalles(JPanel panel) {
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 8, 8, 8);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        
        // Tipo de Evento
        gbc.gridx = 0; gbc.gridy = 0; gbc.weightx = 0;
        panel.add(new JLabel("Tipo de Evento:"), gbc);
        gbc.gridx = 1; gbc.weightx = 1.0;
        String[] tipos = {"Inundación", "Incendio", "Climático", "Otro"};
        panel.add(new JComboBox<>(tipos), gbc);

        // Descripción Breve
        gbc.gridx = 0; gbc.gridy = 1; gbc.gridwidth = 2;
        panel.add(new JLabel("Descripción Breve:"), gbc);
        
        gbc.gridy = 2; gbc.weighty = 1.0; gbc.fill = GridBagConstraints.BOTH;
        JTextArea descripcionTextArea = new JTextArea(5, 20);
        descripcionTextArea.setLineWrap(true);
        panel.add(new JScrollPane(descripcionTextArea), gbc);
        
        return panel;
    }

    private JPanel crearPanelUbicacion(JPanel panel) {
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 8, 8, 8);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        
        // Latitud
        gbc.gridx = 0; gbc.gridy = 0; panel.add(new JLabel("Latitud:"), gbc);
        gbc.gridx = 1; panel.add(new JTextField(15), gbc);

        // Longitud
        gbc.gridx = 0; gbc.gridy = 1; panel.add(new JLabel("Longitud:"), gbc);
        gbc.gridx = 1; panel.add(new JTextField(15), gbc);
        
        // Botón Ubicación Actual
        gbc.gridx = 0; gbc.gridy = 2; gbc.gridwidth = 2; gbc.fill = GridBagConstraints.NONE;
        panel.add(new JButton("Usar Ubicación Actual (Simulado)"), gbc);
        
        return panel;
    }
}

// ----------------------------------------------------------------------------------
// PANTALLA 4: VISUALIZAR EVENTOS EN EL MAPA (Dashboard Principal)
// ----------------------------------------------------------------------------------

class MainDashboard extends JFrame {
    
    // Constructor de MainDashboard
    public MainDashboard() {
        setTitle("SATE - Monitor de Eventos y Alertas");
        setExtendedState(JFrame.MAXIMIZED_BOTH); 
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        // ... [JMenuBar] - El menú principal se mantiene igual ...
        JMenuBar menuBar = new JMenuBar();
        menuBar.add(new JMenu("Archivo"));
        menuBar.add(new JMenu("Eventos"));
        // Simular conexión a la BBDD al iniciar el dashboard
        menuBar.add(new JMenu("Test DB")).addActionListener(e -> DBConnector.testConnection()); 
        // ------------------------------------------------------------------------
        
        setJMenuBar(menuBar);

        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
        splitPane.setDividerLocation(350); 

        // --- PANEL IZQUIERDO: Filtros y Tabla ---
        JPanel leftPanel = new JPanel(new BorderLayout());
        leftPanel.setBorder(BorderFactory.createTitledBorder("⚙️ Controles y Eventos"));
        
        // Panel superior para Filtros y Botones
        JPanel controlPanel = new JPanel(new BorderLayout());
        
        // Sub-panel para los filtros (GridBagLayout)
        JPanel filterPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        
        // [Filtros]
        filterPanel.add(new JLabel("Filtrar por Tipo:"), gbc(0, 0, gbc));
        JComboBox<String> tipoComboBox = new JComboBox<>(new String[]{"Todos", "Inundación", "Incendio"});
        filterPanel.add(tipoComboBox, gbc(1, 0, gbc));

        filterPanel.add(new JLabel("Estado:"), gbc(0, 1, gbc));
        JPanel statusChecks = new JPanel(new FlowLayout(FlowLayout.LEFT));
        statusChecks.add(new JCheckBox("Aprobado", true));
        statusChecks.add(new JCheckBox("Pendiente", true));
        filterPanel.add(statusChecks, gbc(1, 1, gbc));
        
        // Panel de botones de acción
        JPanel actionButtonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 5));
        
        // 1. Botón de Reporte Manual (NUEVO)
        JButton newReportButton = new JButton("➕ Nuevo Reporte Manual");
        newReportButton.addActionListener(e -> {
            // Acción CORREGIDA: Abrir la ventana de Reporte Manual
            new ReporteManualScreen().setVisible(true); 
        });
        
        // 2. Botón Aplicar Filtros (CORREGIDO)
        JButton applyButton = new JButton("Aplicar Filtros");
        applyButton.addActionListener(e -> {
            // Acción CORREGIDA: Simular la acción de filtrar
            String tipo = (String) tipoComboBox.getSelectedItem();
            JOptionPane.showMessageDialog(this, 
                "Simulando filtrado de eventos de tipo: " + tipo, 
                "Filtro Aplicado", JOptionPane.INFORMATION_MESSAGE);
            
            // Aquí se llamaría al método que recarga la JTable con la consulta a la BBDD
        });
        
        actionButtonPanel.add(applyButton);
        actionButtonPanel.add(newReportButton);
        
        controlPanel.add(filterPanel, BorderLayout.NORTH);
        controlPanel.add(actionButtonPanel, BorderLayout.SOUTH);

        // JTable para la lista de Eventos
        String[] columnNames = {"ID", "Tipo", "Fecha/Hora", "Estado"};
        Object[][] data = {
            {"101", "Inundación", "2025-10-01", "Aprobado"},
            {"102", "Incendio", "2025-09-30", "Pendiente"},
            {"103", "Climático", "2025-09-29", "Rechazado"}
        };
        JTable eventTable = new JTable(data, columnNames);
        JScrollPane scrollPane = new JScrollPane(eventTable);
        
        leftPanel.add(controlPanel, BorderLayout.NORTH);
        leftPanel.add(scrollPane, BorderLayout.CENTER);
        
        // --- PANEL DERECHO: Mapa (Se mantiene igual) ---
        JPanel mapPanel = new JPanel(new BorderLayout());
        mapPanel.setBorder(BorderFactory.createTitledBorder("🗺️ Visualización de Mapa"));
        
        JLabel mapPlaceholder = new JLabel("<< Componente de Mapa GIS con Marcadores de Eventos >>", SwingConstants.CENTER);
        mapPlaceholder.setFont(new Font("Segoe UI", Font.ITALIC, 20));
        mapPlaceholder.setBackground(new Color(220, 220, 255)); // Color claro para simular un mapa
        mapPlaceholder.setOpaque(true);
        mapPanel.add(mapPlaceholder, BorderLayout.CENTER);
        
        // Configurar el SplitPane
        splitPane.setLeftComponent(leftPanel);
        splitPane.setRightComponent(mapPanel);

        add(splitPane, BorderLayout.CENTER);
        
        // Barra de Estado
        JLabel statusBar = new JLabel("Estado: Conectado. Servidor DB: 10.0.100.24. ");
        statusBar.setBorder(BorderFactory.createEtchedBorder());
        add(statusBar, BorderLayout.SOUTH);
    }
    
    // Métodos helper para GridBagConstraints
    private GridBagConstraints gbc(int x, int y, GridBagConstraints base, int width) {
        base.gridx = x;
        base.gridy = y;
        base.gridwidth = width;
        return base;
    }
    private GridBagConstraints gbc(int x, int y, GridBagConstraints base) {
        return gbc(x, y, base, 1);
    }
}